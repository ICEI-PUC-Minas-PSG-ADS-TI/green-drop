CREATE TABLE users (
    id             SERIAL PRIMARY KEY,
    name           VARCHAR(100) NOT NULL UNIQUE,
    password_hash  VARCHAR(255) NOT NULL,
    phone          VARCHAR(20) NOT NULL UNIQUE,
    email          VARCHAR(100) NOT NULL UNIQUE,
    photo_url      VARCHAR(255),
    role           VARCHAR(50) NOT NULL,
    created_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    firebase_uid   VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE report (
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id        BIGINT,
    description    TEXT,
    photo_url      TEXT,
    status         VARCHAR(50),
    created_at     TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(),
    validated_at   TIMESTAMP WITHOUT TIME ZONE,
    latitude       NUMERIC(10,8),
    longitude      NUMERIC(11,8),
    category       VARCHAR(100),
    problem_type   VARCHAR(100),
    CONSTRAINT fk_report_user
        FOREIGN KEY(user_id)
        REFERENCES users(id)
        ON UPDATE CASCADE
        ON DELETE SET NULL
);

CREATE TABLE achievement (
    id          BIGSERIAL PRIMARY KEY,
    title       VARCHAR(255),
    description VARCHAR(255)
);

CREATE TABLE quest (
    id          BIGSERIAL PRIMARY KEY,
    title       VARCHAR(255),
    description VARCHAR(255)
);

CREATE TABLE achievement_quest (
    achievementsid BIGINT NOT NULL,
    questsid      BIGINT NOT NULL,
    goal          INTEGER,
    PRIMARY KEY (achievementsid, questsid),
    CONSTRAINT fk_achievement_quest_achievement
        FOREIGN KEY(achievementsid)
        REFERENCES achievement(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_achievement_quest_quest
        FOREIGN KEY(questsid)
        REFERENCES quest(id)
        ON DELETE CASCADE
);

CREATE TABLE achievements_progress (
    id                   BIGSERIAL PRIMARY KEY,
    achievementsid       BIGINT    NOT NULL,
    usersid              BIGINT    NOT NULL,
    completed_challenges INTEGER,
    status               VARCHAR(255),
    CONSTRAINT fk_ap_achievement
        FOREIGN KEY(achievementsid)
        REFERENCES achievement(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_ap_user
        FOREIGN KEY(usersid)
        REFERENCES users(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

CREATE TABLE quests_progress (
    id         BIGSERIAL PRIMARY KEY,
    questsid   BIGINT    NOT NULL,
    usersid    BIGINT    NOT NULL,
    progress   INTEGER,
    status     VARCHAR(255),
    CONSTRAINT fk_qp_quest
        FOREIGN KEY(questsid)
        REFERENCES quest(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_qp_user
        FOREIGN KEY(usersid)
        REFERENCES users(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);